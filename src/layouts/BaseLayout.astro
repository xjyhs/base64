---
export interface Props {
  title: string;
  description: string;
  keywords?: string;
  ogImage?: string;
}

const { title, description, keywords = "", ogImage } = Astro.props;

// 修复URL构造错误 - 在开发环境中Astro.site可能为undefined
const canonicalURL = Astro.site 
  ? new URL(Astro.url.pathname, Astro.site)
  : new URL(Astro.url.pathname, `http://localhost:3000`);
---

<!DOCTYPE html>
<html lang="zh-CN" data-theme="light">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title}</title>
  <meta name="description" content={description}>
  <meta name="keywords" content={keywords}>
  <link rel="canonical" href={canonicalURL}>
  
  <!-- Open Graph -->
  <meta property="og:type" content="website">
  <meta property="og:title" content={title}>
  <meta property="og:description" content={description}>
  <meta property="og:url" content={canonicalURL}>
  {ogImage && <meta property="og:image" content={ogImage}>}
  
  <!-- Twitter Card -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content={title}>
  <meta name="twitter:description" content={description}>
  {ogImage && <meta name="twitter:image" content={ogImage}>}
  
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  <meta name="generator" content={Astro.generator}>
  
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
</head>
<body class="min-h-screen bg-white text-gray-900 [data-theme='dark']:[&]:bg-gray-900 [data-theme='dark']:[&]:text-white font-sans antialiased">
  <div class="flex flex-col min-h-screen">
    <header class="sticky top-0 z-50 bg-white/80 backdrop-blur-lg border-b border-gray-200 [data-theme='dark']:[&]:bg-gray-900/80 [data-theme='dark']:[&]:border-gray-800">
      <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between h-16">
          <a href="/" class="flex items-center gap-2 text-xl font-semibold text-gray-900 hover:text-blue-600 transition-colors [data-theme='dark']:[&]:text-white [data-theme='dark']:[&]:hover:text-blue-400">
            <span class="text-2xl">🔗</span>
            <span>Base64 Tool</span>
          </a>
          <div class="flex items-center gap-4">
            <button 
              id="theme-toggle" 
              class="p-2 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-600 hover:text-gray-900 transition-all duration-200 hover:scale-105 [data-theme='dark']:[&]:bg-gray-800 [data-theme='dark']:[&]:hover:bg-gray-700 [data-theme='dark']:[&]:text-gray-400 [data-theme='dark']:[&]:hover:text-white"
              aria-label="切换主题"
              type="button"
            >
              <span class="theme-icon text-lg">🌙</span>
            </button>
            <div id="lang-switcher-placeholder"></div>
          </div>
        </div>
      </div>
    </header>
    
    <main class="flex-1 bg-white [data-theme='dark']:[&]:bg-gray-900">
      <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <slot />
      </div>
    </main>
    
    <footer class="border-t border-gray-200 bg-gray-50 [data-theme='dark']:[&]:border-gray-800 [data-theme='dark']:[&]:bg-gray-800">
      <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="text-center">
          <p class="text-sm text-gray-600 [data-theme='dark']:[&]:text-gray-400">
            © 2024 Base64 Tool. Local processing, protecting privacy and security.
          </p>
        </div>
      </div>
    </footer>
  </div>

  <script>
    // 主题系统
    function initTheme() {
      const themeToggle = document.getElementById('theme-toggle');
      const themeIcon = themeToggle?.querySelector('.theme-icon');
      
      // 获取系统偏好或保存的主题
      const savedTheme = localStorage.getItem('theme');
      const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      const initialTheme = savedTheme || (systemPrefersDark ? 'dark' : 'light');
      
      document.documentElement.setAttribute('data-theme', initialTheme);
      updateThemeIcon(initialTheme);
      
      // 主题切换
      themeToggle?.addEventListener('click', () => {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        updateThemeIcon(newTheme);
        
        // 图标旋转动画
        if (themeIcon) {
          themeIcon.style.transform = 'rotateY(180deg) scale(0.8)';
          setTimeout(() => {
            themeIcon.style.transform = 'rotateY(0deg) scale(1)';
          }, 150);
        }
      });
      
      // 监听系统主题变化
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        if (!localStorage.getItem('theme')) {
          const newTheme = e.matches ? 'dark' : 'light';
          document.documentElement.setAttribute('data-theme', newTheme);
          updateThemeIcon(newTheme);
        }
      });
      
      function updateThemeIcon(theme) {
        if (themeIcon) {
          themeIcon.textContent = theme === 'dark' ? '☀️' : '🌙';
          themeIcon.setAttribute('aria-label', theme === 'dark' ? '切换到亮色模式' : '切换到暗色模式');
        }
      }
    }
    
    // 初始化主题系统
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initTheme);
    } else {
      initTheme();
    }
  </script>
</body>
</html> 