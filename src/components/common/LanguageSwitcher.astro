---
import languageConfig from '../../config/languages.json';

export interface Props {
  currentLang: string;
  pageName: string;
}

const { currentLang, pageName } = Astro.props;
const { defaultLanguage, supportedLanguages } = languageConfig;

// 获取当前语言信息
const currentLangInfo = supportedLanguages.find(lang => lang.code === currentLang);
if (!currentLangInfo) {
  throw new Error(`Language ${currentLang} not found in configuration`);
}

// 获取其他语言（排除当前语言）
const otherLangs = supportedLanguages.filter(l => l.code !== currentLang).map(l => {
  let targetPath = '';
  
  if (l.code === defaultLanguage) {
    // 跳转到默认语言（英文）
    targetPath = `/index.html`;
  } else {
    // 跳转到非默认语言
    targetPath = `/${l.code}/index.html`;
  }
  
  return {
    code: l.code,
    name: l.name,
    flag: l.flag,
    path: targetPath
  };
});
---

<div class="relative">
  <button 
    id="lang-switcher-btn" 
    class="flex items-center gap-2 px-3 py-1.5 text-sm font-medium text-gray-700 dark:text-gray-300 
           bg-gradient-to-r from-white to-gray-50 dark:from-gray-800 dark:to-gray-700 
           hover:from-blue-50 hover:to-indigo-50 dark:hover:from-blue-900/30 dark:hover:to-indigo-900/30
           border border-gray-200 dark:border-gray-600 
           rounded-lg shadow-sm hover:shadow-md 
           transition-all duration-200 ease-out
           hover:scale-[1.02] hover:border-blue-300 dark:hover:border-blue-600
           group"
    type="button"
    aria-label="切换语言"
  >
    <span class="text-base transition-transform duration-200 group-hover:scale-110">{currentLangInfo.flag}</span>
    <span class="font-medium text-gray-800 dark:text-gray-200 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-200">{currentLangInfo.name}</span>
    <svg class="w-3.5 h-3.5 text-gray-500 dark:text-gray-400 group-hover:text-blue-500 dark:group-hover:text-blue-400 transition-all duration-200 transform group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>
  
  <div 
    id="lang-switcher-menu" 
    class="absolute right-0 top-full mt-1 w-36
           bg-white dark:bg-gray-800 
           border border-gray-200 dark:border-gray-600 
           rounded-lg shadow-lg 
           ring-1 ring-black/5 dark:ring-white/10
           backdrop-blur-sm
           z-50 hidden 
           transform opacity-0 scale-95 translate-y-[-4px]
           transition-all duration-200 ease-out
           origin-top-right"
  >
    <div class="py-1">
      <div class="px-3 py-1.5 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide border-b border-gray-100 dark:border-gray-700">
        Language
      </div>
      {otherLangs.map((lang) => (
        <a 
          href={lang.path} 
          lang={lang.code} 
          hreflang={lang.code}
          class="flex items-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gradient-to-r hover:from-blue-50 hover:to-indigo-50 dark:hover:from-blue-900/30 dark:hover:to-indigo-900/30 hover:text-blue-600 dark:hover:text-blue-400 transition-all duration-200 group"
        >
          <span class="text-base">{lang.flag}</span>
          <span class="group-hover:font-semibold transition-all duration-200">{lang.name}</span>
          <svg class="w-3.5 h-3.5 text-gray-400 group-hover:text-blue-500 transition-colors duration-200 opacity-0 group-hover:opacity-100 transform translate-x-0 group-hover:translate-x-1 ml-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </a>
      ))}
    </div>
  </div>
</div>

<script>
  function initLanguageSwitcher() {
    const btn = document.getElementById('lang-switcher-btn');
    const menu = document.getElementById('lang-switcher-menu');
    
    if (!btn || !menu) return;
    
    btn.addEventListener('click', function(e) {
      e.stopPropagation();
      const isHidden = menu.classList.contains('hidden');
      
      if (isHidden) {
        menu.classList.remove('hidden');
        requestAnimationFrame(() => {
          menu.classList.remove('opacity-0', 'scale-95', 'translate-y-[-4px]');
          menu.classList.add('opacity-100', 'scale-100', 'translate-y-0');
        });
      } else {
        menu.classList.add('opacity-0', 'scale-95', 'translate-y-[-4px]');
        menu.classList.remove('opacity-100', 'scale-100', 'translate-y-0');
        setTimeout(() => {
          menu.classList.add('hidden');
        }, 200);
      }
    });
    
    document.addEventListener('click', function() {
      if (!menu.classList.contains('hidden')) {
        menu.classList.add('opacity-0', 'scale-95', 'translate-y-[-4px]');
        menu.classList.remove('opacity-100', 'scale-100', 'translate-y-0');
        setTimeout(() => {
          menu.classList.add('hidden');
        }, 200);
      }
    });
    
    menu.addEventListener('click', function(e) {
      e.stopPropagation();
    });
  }

  // 初始化语言切换器
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLanguageSwitcher);
  } else {
    initLanguageSwitcher();
  }
</script> 